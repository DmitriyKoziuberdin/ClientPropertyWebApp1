// <auto-generated />
using System;
using ClientPropertyWebApp1.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClientPropertyWebApp1.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230709090702_InitValue")]
    partial class InitValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClientPropertyWebApp1.Shared.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CurrentValue")
                        .HasColumnType("double precision");

                    b.Property<int>("DaysOfPropertyOwnership")
                        .HasColumnType("integer");

                    b.Property<double>("InitialValue")
                        .HasColumnType("double precision");

                    b.Property<string>("NameProperty")
                        .HasColumnType("text");

                    b.Property<string>("PriceLossPeriod")
                        .HasColumnType("text");

                    b.Property<double>("PriceLossSelectedPeriod")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeOfProperty")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentValue = 1000.0,
                            DaysOfPropertyOwnership = 10,
                            InitialValue = 9000.0,
                            NameProperty = "Property 1",
                            PriceLossPeriod = "Year",
                            PriceLossSelectedPeriod = 10.0,
                            PurchaseDate = new DateTimeOffset(new DateTime(2023, 7, 9, 12, 7, 2, 234, DateTimeKind.Unspecified).AddTicks(3036), new TimeSpan(0, 3, 0, 0, 0)),
                            TypeOfProperty = "TypeOfProperty 1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CurrentValue = 10000000.0,
                            DaysOfPropertyOwnership = 10,
                            InitialValue = 9000000.0,
                            NameProperty = "Property 2",
                            PriceLossPeriod = "Year",
                            PriceLossSelectedPeriod = 10.0,
                            PurchaseDate = new DateTimeOffset(new DateTime(2023, 7, 9, 12, 7, 2, 234, DateTimeKind.Unspecified).AddTicks(3091), new TimeSpan(0, 3, 0, 0, 0)),
                            TypeOfProperty = "TypeOfProperty 2",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClientPropertyWebApp1.Shared.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<double>("CurrentSumOfUserProperty")
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<double>("InitialSumOfUserProperty")
                        .HasColumnType("double precision");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Address",
                            ConcurrencyStamp = "b58a351c-1739-45d2-a050-206fd4b6878a",
                            CurrentSumOfUserProperty = 100000000.0,
                            EmailConfirmed = false,
                            InitialSumOfUserProperty = 90000000.0,
                            LockoutEnabled = false,
                            Name = "User 1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b81e96d-f6a8-4c2b-8479-2aa5f2d7889e",
                            Telephone = "0957737020",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Address",
                            ConcurrencyStamp = "7b76e1d2-1d04-42e0-a27a-1da8ecc45006",
                            CurrentSumOfUserProperty = 100000000.0,
                            EmailConfirmed = false,
                            InitialSumOfUserProperty = 90000000.0,
                            LockoutEnabled = false,
                            Name = "User 2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adb8e518-8147-463c-a310-58875f3885bd",
                            Telephone = "0957737020",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("ClientPropertyWebApp1.Shared.Property", b =>
                {
                    b.HasOne("ClientPropertyWebApp1.Shared.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
